# =================================== project ====================================
[project]
  name = "frogmouth"
  urls = { Homepage = "https://github.com/josephcourtney/frogmouth" }
  version = "0.9.2"
  description = "A Markdown document viewer for the terminal. Forked for customization."
  authors = [{ name = "Dave Pearson", email = "dave@textualize.io" }]
  license = { text = "MIT" }
  readme = "README.md"
  requires-python = ">=3.8"
  classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Other Audience",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup :: Markdown",
  ]
  dependencies = [
    "httpx>=0.24.1,<0.25",
    "xdg>=6,<7",
    'typing-extensions>=4.5; python_version < "3.11"',
    "textual-image[textual]>=0.8.4",
]

  [project.scripts]
    frogmouth = "frogmouth.app.app:run"

[dependency-groups]
  dev = [
    "coverage>=7.6.1",
    "pre-commit>=3.5.0",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.1",
    "pytest-randomly>=3.15.0",
    "pytest-xdist>=3.6.1",
    "ruff>=0.13.0",
    "textual-dev>=1.5.1",
    "ty>=0.0.1a20",
  ]

# =================================== build ====================================
[build-system]
  requires      = ["uv_build>=0.6,<0.7"]
  build-backend = "uv_build"

[tool.uv.sources]

# ==================================== lint ====================================
[tool.ruff]
  extend = "./ruff.default.toml"

  [tool.ruff.lint]
    ignore = [
      # "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
      # "TD003",  # Missing issue link for this TODO
      # "FIX002", # Line contains TODO, consider resolving the issue
    ]

# =================================== test ===================================
[tool.pytest.ini_options]
  addopts = [
    "--cov-branch",
    "--cov=frogmouth",
    "--cov-report=xml",
  ]
  testpaths = ["tests"]
  markers = [
    "perf: performance tests",
  ]

# =================================== test:coverage ===================================
[tool.coverage.run]
  source   = ["src/frogmouth"]
  branch   = true
  parallel = true

[tool.coverage.report]
  show_missing = false
  skip_covered = true
  # Regexes for lines to exclude from consideration
  exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
  ]
  ignore_errors = true

[tool.coverage.xml]
  output = ".coverage.xml"
